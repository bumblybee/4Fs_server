// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Users = sequelize.define('users', {
    firstName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    lastName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    email: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    phone: {
      type: DataTypes.STRING,
    },
    age: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    weight: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    height: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    gender: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    sheetsUrl: {
      type: DataTypes.STRING,
    },
    password: {
      type: DataTypes.STRING,
    },
    resetPasswordToken: {
      type: DataTypes.STRING,
    },
    resetPasswordExpiry: {
      type: DataTypes.DATE,
    },
    isAdmin: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
    },
    isDeleted: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
    deletedAt: {
      type: DataTypes.DATE,
    },
  }, {
    tableName: 'users',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Users.associate = (models) => {
    Users.hasMany(models.moments, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'moments',
    });
    Users.hasMany(models.accomplishments, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'accomplishments',
    });
    Users.hasMany(models.beliefs, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'beliefs',
    });
    Users.hasMany(models.fastingWindows, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'fastingWindows',
    });
    Users.hasMany(models.habits, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'habits',
    });
    Users.hasMany(models.milestones, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'milestones',
    });
    Users.hasMany(models.skills, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'skills',
    });
    Users.hasMany(models.sleep, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'sleeps',
    });
    Users.hasMany(models.practiceWeeks, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'practiceWeeks',
    });
    Users.hasMany(models.practiceStore, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'practiceStores',
    });
    Users.hasMany(models.practices, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'practices',
    });
    Users.hasMany(models.fasting, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'fastings',
    });
    Users.hasMany(models.shareds, {
      foreignKey: {
        name: 'userIdKey',
        field: 'userId',
      },
      as: 'shareds',
    });
  };

  return Users;
};
